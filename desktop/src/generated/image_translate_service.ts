// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "image_translate_service.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ImageTranslateRequest
 */
export interface ImageTranslateRequest {
    /**
     * @generated from protobuf field: bytes image = 1;
     */
    image: Uint8Array;
    /**
     * @generated from protobuf field: string language = 2;
     */
    language: string;
}
/**
 * @generated from protobuf message ImageTranslateResponse
 */
export interface ImageTranslateResponse {
    /**
     * @generated from protobuf field: bytes image = 1;
     */
    image: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class ImageTranslateRequest$Type extends MessageType<ImageTranslateRequest> {
    constructor() {
        super("ImageTranslateRequest", [
            { no: 1, name: "image", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "language", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ImageTranslateRequest>): ImageTranslateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.image = new Uint8Array(0);
        message.language = "";
        if (value !== undefined)
            reflectionMergePartial<ImageTranslateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImageTranslateRequest): ImageTranslateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes image */ 1:
                    message.image = reader.bytes();
                    break;
                case /* string language */ 2:
                    message.language = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImageTranslateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes image = 1; */
        if (message.image.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.image);
        /* string language = 2; */
        if (message.language !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.language);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ImageTranslateRequest
 */
export const ImageTranslateRequest = new ImageTranslateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImageTranslateResponse$Type extends MessageType<ImageTranslateResponse> {
    constructor() {
        super("ImageTranslateResponse", [
            { no: 1, name: "image", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ImageTranslateResponse>): ImageTranslateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.image = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<ImageTranslateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImageTranslateResponse): ImageTranslateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes image */ 1:
                    message.image = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImageTranslateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes image = 1; */
        if (message.image.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.image);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ImageTranslateResponse
 */
export const ImageTranslateResponse = new ImageTranslateResponse$Type();
/**
 * @generated ServiceType for protobuf service ImageTranslateService
 */
export const ImageTranslateService = new ServiceType("ImageTranslateService", [
    { name: "Translate", options: {}, I: ImageTranslateRequest, O: ImageTranslateResponse }
]);
